diff --git a/History.md b/History.md
index 18202c8..023dd6c 100644
--- a/History.md
+++ b/History.md
@@ -1,3 +1,11 @@
+0.0.4 / 2012-12-02
+==================
+
+  * Syntax changed
+  * middleware now provides 'begin','end','abort' events
+  * if file was renamed during upload to avoid conflict,
+    new field 'originalName' keeps original name
+
 0.0.3 / 2012-11-25
 ==================
 
diff --git a/README.md b/README.md
index 9debff1..00caeb1 100644
--- a/README.md
+++ b/README.md
@@ -18,10 +18,23 @@ Usage:
     var app = express();
     app.configure(function () {
         ...
-        app.use('/upload', upload({
+        app.use('/upload', upload.fileHandler({
             uploadDir: __dirname + '/public/uploads',
             uploadUrl: '/uploads/'
         }));
+        upload.on('end', function (fileInfo) {
+            // fileInfo structure is the same as returned to browser
+            // { 
+            //     name: '3 (3).jpg',
+            //     originalName: '3.jpg',
+            //     size: 79262,
+            //     type: 'image/jpeg',
+            //     delete_type: 'DELETE',
+            //     delete_url: 'http://yourhost/upload/3%20(3).jpg',
+            //     url: 'http://yourhost/uploads/3%20(3).jpg',
+            //     thumbnail_url: 'http://youhost/uploads/thumbnail/3%20(3).jpg' 
+            // }
+        });
         app.use(express.bodyParser());
         ...
     });
diff --git a/index.js b/index.js
index c1bb81f..f7ae668 100644
--- a/index.js
+++ b/index.js
@@ -1,19 +1,6 @@
-module.exports = function (options) {
+var _ = require('lodash');
 
-    var path = require('path'),
-        fs = require('fs'),
-        formidable = require('formidable'),
-        imageMagick = require('imagemagick'),
-        _ = require('lodash'),
-        // Since Node 0.8, .existsSync() moved from path to fs:
-        _existsSync = fs.existsSync || path.existsSync,
-        utf8encode = function (str) {
-            return unescape(encodeURIComponent(str));
-        },
-        nameCountRegexp = /(?:(?: \(([\d]+)\))?(\.[^.]+))?$/,
-        nameCountFunc = function (s, index, ext) {
-            return ' (' + ((parseInt(index, 10) || 0) + 1) + ')' + (ext || '');
-        };
+var FileHandler = function (middleware, options, callback) {
 
     options = _.extend({
         tmpDir: '/tmp',
@@ -28,12 +15,10 @@ module.exports = function (options) {
         safeFileTypes: /\.(gif|jpe?g|png)$/i,
         imageTypes: /\.(gif|jpe?g|png)$/i,
         imageVersions: {
-            /*
-             thumbnail: {
-             width: 80,
-             height: 80
-             }
-             */
+//            thumbnail: {
+//                width: 80,
+//                height: 80
+//            }
         },
         accessControl: {
             allowOrigin: '*',
@@ -41,210 +26,44 @@ module.exports = function (options) {
         }
     }, options);
 
-    var FileInfo = function (file) {
-        this.name = file.name;
-        this.size = file.size;
-        this.type = file.type;
-        this.delete_type = 'DELETE';
-    };
-
-    FileInfo.prototype.validate = function () {
-        if (options.minFileSize && options.minFileSize > this.size) {
-            this.error = 'File is too small';
-        } else if (options.maxFileSize && options.maxFileSize < this.size) {
-            this.error = 'File is too big';
-        } else if (!options.acceptFileTypes.test(this.name)) {
-            this.error = 'Filetype not allowed';
-        }
-        return !this.error;
-    };
-
-    FileInfo.prototype.safeName = function () {
-        // Prevent directory traversal and creating hidden system files:
-        this.name = path.basename(this.name).replace(/^\.+/, '');
-        // Prevent overwriting existing files:
-        while (_existsSync(options.uploadDir + '/' + this.name)) {
-            this.name = this.name.replace(nameCountRegexp, nameCountFunc);
-        }
-    };
-
-    FileInfo.prototype.initUrls = function (req) {
-        if (!this.error) {
-            var that = this,
-                baseUrl = (options.ssl ? 'https:' : 'http:') +
-                    '//' + req.headers.host;
-            this.delete_url = baseUrl + req.originalUrl + '/' + encodeURIComponent(this.name);
-            this.url = baseUrl + options.uploadUrl + '/' + encodeURIComponent(this.name);
-            Object.keys(options.imageVersions).forEach(function (version) {
-                if (_existsSync(
-                    options.uploadDir + '/' + version + '/' + that.name
-                )) {
-                    that[version + '_url'] = baseUrl + options.uploadUrl + '/' + version + '/' + encodeURIComponent(that.name);
-                }
-            });
-        }
-    };
-
-    var UploadHandler = function (req, res, callback) {
-        this.req = req;
-        this.res = res;
-        this.callback = callback;
-    };
-
-    UploadHandler.prototype.noCache = function () {
-        this.res.set({
-            'Pragma': 'no-cache',
-            'Cache-Control': 'no-store, no-cache, must-revalidate',
-            'Content-Disposition': 'inline; filename="files.json"'
-        });
-    };
-
-    UploadHandler.prototype.get = function () {
-        var handler = this,
-            files = [];
-        handler.noCache();
-        fs.readdir(options.uploadDir, function (err, list) {
-            _.each(list, function (name) {
-                var stats = fs.statSync(options.uploadDir + '/' + name),
-                    fileInfo;
-                if (stats.isFile()) {
-                    fileInfo = new FileInfo({
-                        name: name,
-                        size: stats.size
-                    });
-                    fileInfo.initUrls(handler.req);
-                    files.push(fileInfo);
-                }
-            });
-            handler.callback(files);
-        });
-    };
-
-    UploadHandler.prototype.post = function () {
-
-        var handler = this,
-            form = new formidable.IncomingForm(),
-            tmpFiles = [],
-            files = [],
-            map = {},
-            counter = 1,
-            redirect,
-            finish = function () {
-                if (!--counter) {
-                    files.forEach(function (fileInfo) {
-                        fileInfo.initUrls(handler.req);
-                    });
-                    handler.callback(files, redirect);
-                }
+    _.each(['uploadDir', 'uploadUrl', 'deleteUrl'], function (key) {
+        if (!_.isFunction(options[key])) {
+            var originalValue = options[key];
+            options[key] = function () {
+                return originalValue
             };
-
-        handler.noCache();
-
-        form.uploadDir = options.tmpDir;
-        form
-            .on('fileBegin', function (name, file) {
-                tmpFiles.push(file.path);
-                var fileInfo = new FileInfo(file, handler.req, true);
-                fileInfo.safeName();
-                map[path.basename(file.path)] = fileInfo;
-                files.push(fileInfo);
-            })
-            .on('field', function (name, value) {
-                if (name === 'redirect') {
-                    redirect = value;
-                }
-            })
-            .on('file', function (name, file) {
-                var fileInfo = map[path.basename(file.path)];
-                if (_existsSync(file.path)) {
-                    fileInfo.size = file.size;
-                    if (!fileInfo.validate()) {
-                        fs.unlink(file.path);
-                        return;
-                    }
-
-                    var generatePreviews = function () {
-                        if (options.imageTypes.test(fileInfo.name) && _.keys(options.imageVersions).length) {
-                            _.keys(options.imageVersions).forEach(function (version) {
-                                if (!_existsSync(options.uploadDir + '/' + version + '/'))
-                                    throw new Error(options.uploadDir + '/' + version + '/' + ' not exists');
-                                counter++;
-                                var opts = options.imageVersions[version];
-                                imageMagick.resize({
-                                    width: opts.width,
-                                    height: opts.height,
-                                    srcPath: options.uploadDir + '/' + fileInfo.name,
-                                    dstPath: options.uploadDir + '/' + version + '/' + fileInfo.name
-                                }, finish);
-                            });
-                        }
-                    }
-
-                    counter++;
-                    fs.rename(file.path, options.uploadDir + '/' + fileInfo.name, function (err) {
-                        if (!err) {
-                            generatePreviews();
-                            finish();
-                        } else {
-                            var is = fs.createReadStream(file.path);
-                            var os = fs.createWriteStream(options.uploadDir + '/' + fileInfo.name);
-                            is.on('end', function (err) {
-                                if (!err) {
-                                    fs.unlinkSync(file.path);
-                                    generatePreviews();
-                                }
-                                finish();
-                            });
-                            is.pipe(os);
-                        }
-                    });
-                }
-            })
-            .on('aborted', function () {
-                tmpFiles.forEach(function (file) {
-                    fs.unlink(file);
-                });
-            })
-            .on('error', function (e) {
-                console.log(e);
-            })
-            .on('progress', function (bytesReceived, bytesExpected) {
-                if (bytesReceived > options.maxPostSize)
-                    handler.req.connection.destroy();
-            })
-            .on('end', finish)
-            .parse(handler.req);
-    };
-
-    UploadHandler.prototype.destroy = function () {
-        var handler = this,
-            fileName = path.basename(decodeURIComponent(this.req.url));
-
-        fs.unlink(options.uploadDir + '/' + fileName, function (ex) {
-            Object.keys(options.imageVersions).forEach(function (version) {
-                fs.unlink(options.uploadDir + '/' + version + '/' + fileName);
-            });
-            handler.callback(!ex);
-        });
-    };
+        }
+    });
 
     return function (req, res, next) {
         res.set({
             'Access-Control-Allow-Origin': options.accessControl.allowOrigin,
             'Access-Control-Allow-Methods': options.accessControl.allowMethods
         });
+        var UploadHandler = require('./lib/uploadhandler')(options);
         var handler = new UploadHandler(req, res, function (result, redirect) {
             if (redirect) {
                 res.redirect(redirect.replace(/%s/, encodeURIComponent(JSON.stringify(result))));
             } else {
                 res.set({
-                    'Content-Type': req.headers.accept.indexOf('application/json') !== -1
+                    'Content-Type': (req.headers.accept || '').indexOf('application/json') !== -1
                         ? 'application/json'
                         : 'text/plain'
                 });
                 res.json(200, result);
             }
         });
+
+        handler.on('begin', function () {
+            EventEmitter.emit.apply(middleware, ['begin'].concat(arguments));
+        });
+        handler.on('end', function () {
+            EventEmitter.emit.apply(middleware, ['end'].concat(arguments));
+        });
+        handler.on('abort', function () {
+            EventEmitter.emit.apply(middleware, ['abort'].concat(arguments));
+        });
+
         switch (req.method) {
             case 'OPTIONS':
                 res.end();
@@ -262,7 +81,22 @@ module.exports = function (options) {
             default:
                 res.send(405);
         }
-
     }
+};
+
+var EventEmitter = require('events').EventEmitter;
+var JqueryFileUploadMiddleware = function () {
+    EventEmitter.call(this);
+};
+require('util').inherits(JqueryFileUploadMiddleware, EventEmitter);
+
+JqueryFileUploadMiddleware.prototype.fileHandler = function (options) {
+    return FileHandler(this, options);
+};
+
+/*JqueryFileUploadMiddleware.prototype.getFiles = function (options) {
+ return FileHandler(this, options, callback);
+ };*/
+
+module.exports = new JqueryFileUploadMiddleware();
 
-};
\ No newline at end of file
diff --git a/lib/fileinfo.js b/lib/fileinfo.js
index 8b8a069..664ca70 100644
--- a/lib/fileinfo.js
+++ b/lib/fileinfo.js
@@ -1,7 +1,41 @@
-/**
- * Created with IntelliJ IDEA.
- * User: ag
- * Date: 12/2/12
- * Time: 7:52 PM
- * To change this template use File | Settings | File Templates.
- */
+var fs = require('fs'),
+    _ = require('lodash');
+
+module.exports = function (options) {
+
+    var FileInfo = function (file) {
+        this.name = file.name;
+        this.originalName = file.name;
+        this.size = file.size;
+        this.type = file.type;
+        this.delete_type = 'DELETE';
+    };
+
+    FileInfo.prototype.validate = function () {
+        if (options.minFileSize && options.minFileSize > this.size) {
+            this.error = 'File is too small';
+        } else if (options.maxFileSize && options.maxFileSize < this.size) {
+            this.error = 'File is too big';
+        } else if (!options.acceptFileTypes.test(this.name)) {
+            this.error = 'Filetype not allowed';
+        }
+        return !this.error;
+    };
+
+    FileInfo.prototype.safeName = function () {
+        // Prevent directory traversal and creating hidden system files:
+        this.name = require('path').basename(this.name).replace(/^\.+/, '');
+        // Prevent overwriting existing files:
+        while (fs.existsSync(options.baseDir() + '/' + this.name)) {
+            this.name = this.name.replace(/(?:(?: \(([\d]+)\))?(\.[^.]+))?$/, function (s, index, ext) {
+                return ' (' + ((parseInt(index, 10) || 0) + 1) + ')' + (ext || '');
+            });
+        }
+    };
+
+    FileInfo.prototype.setUrl = function (url) {
+
+    }
+
+    return FileInfo;
+};
\ No newline at end of file
diff --git a/lib/uploadhandler.js b/lib/uploadhandler.js
index b6423fa..ed5b18d 100644
--- a/lib/uploadhandler.js
+++ b/lib/uploadhandler.js
@@ -1,7 +1,176 @@
-/**
- * Created with IntelliJ IDEA.
- * User: ag
- * Date: 12/2/12
- * Time: 7:38 PM
- * To change this template use File | Settings | File Templates.
- */
+var EventEmitter = require('events').EventEmitter,
+    path = require('path'),
+    fs = require('fs'),
+    formidable = require('formidable'),
+    imageMagick = require('imagemagick'),
+    mkdirp = require('mkdirp'),
+    _ = require('lodash'),
+    utf8encode = function (str) {
+        return unescape(encodeURIComponent(str));
+    };
+
+module.exports = function (options) {
+
+    var FileInfo = require('./fileinfo')(
+        _.extend({
+            baseDir: options.uploadDir
+        }, _.pick(options, 'minFileSize', 'maxFileSize', 'acceptFileTypes'))
+    );
+
+    var UploadHandler = function (req, res, callback) {
+        EventEmitter.call(this);
+        this.req = req;
+        this.res = res;
+        this.callback = callback;
+    };
+    require('util').inherits(UploadHandler, EventEmitter);
+
+    UploadHandler.prototype.noCache = function () {
+        this.res.set({
+            'Pragma': 'no-cache',
+            'Cache-Control': 'no-store, no-cache, must-revalidate',
+            'Content-Disposition': 'inline; filename="files.json"'
+        });
+    };
+
+    UploadHandler.prototype.get = function () {
+        this.noCache();
+        var files = [];
+        fs.readdir(options.uploadDir(), _.bind(function (err, list) {
+            _.each(list, function (name) {
+                var stats = fs.statSync(options.uploadDir() + '/' + name),
+                    fileInfo;
+                if (stats.isFile()) {
+                    fileInfo = new FileInfo({
+                        name: name,
+                        size: stats.size
+                    });
+                    fileInfo.initUrls(this.req.headers.host, this.req.originalUrl);
+                    files.push(fileInfo);
+                }
+            }, this);
+            this.callback(files);
+        }, this));
+    };
+
+    UploadHandler.prototype.post = function () {
+
+        var self = this,
+            form = new formidable.IncomingForm(),
+            tmpFiles = [],
+            files = [],
+            map = {},
+            counter = 1,
+            redirect,
+            finish = _.bind(function () {
+                if (!--counter) {
+                    _.each(files, function (fileInfo) {
+                        fileInfo.initUrls(this.req.headers.host, this.req.originalUrl);
+                        this.emit('end', fileInfo);
+                    }, this);
+                    this.callback(files, redirect);
+                }
+            }, this);
+
+        this.noCache();
+
+        form.uploadDir = options.tmpDir;
+        form
+            .on('fileBegin', function (name, file) {
+                tmpFiles.push(file.path);
+                var fileInfo = new FileInfo(file);
+                fileInfo.safeName();
+                map[path.basename(file.path)] = fileInfo;
+                files.push(fileInfo);
+                self.emit('begin', fileInfo);
+            })
+            .on('field', function (name, value) {
+                if (name === 'redirect') {
+                    redirect = value;
+                }
+            })
+            .on('file', function (name, file) {
+                var fileInfo = map[path.basename(file.path)];
+                if (_existsSync(file.path)) {
+                    fileInfo.size = file.size;
+                    if (!fileInfo.validate()) {
+                        fs.unlink(file.path);
+                        return;
+                    }
+
+                    var generatePreviews = function () {
+                        if (options.imageTypes.test(fileInfo.name)) {
+                            _.each(options.imageVersions, function (value, version) {
+                                console.log(arguments);
+                                // creating directory recursive
+                                if (!_existsSync(options.uploadDir() + '/' + version + '/'))
+                                    mkdirp.sync(options.uploadDir() + '/' + version + '/');
+
+                                counter++;
+                                var opts = options.imageVersions[version];
+                                imageMagick.resize({
+                                    width: opts.width,
+                                    height: opts.height,
+                                    srcPath: options.uploadDir() + '/' + fileInfo.name,
+                                    dstPath: options.uploadDir() + '/' + version + '/' + fileInfo.name
+                                }, finish);
+                            });
+                        }
+                    }
+
+                    if (!_existsSync(options.uploadDir() + '/'))
+                        mkdirp.sync(options.uploadDir() + '/');
+
+                    counter++;
+                    fs.rename(file.path, options.uploadDir() + '/' + fileInfo.name, function (err) {
+                        if (!err) {
+                            generatePreviews();
+                            finish();
+                        } else {
+                            var is = fs.createReadStream(file.path);
+                            var os = fs.createWriteStream(options.uploadDir() + '/' + fileInfo.name);
+                            is.on('end', function (err) {
+                                if (!err) {
+                                    fs.unlinkSync(file.path);
+                                    generatePreviews();
+                                }
+                                finish();
+                            });
+                            is.pipe(os);
+                        }
+                    });
+                }
+            })
+            .on('aborted', function () {
+                _.each(tmpFiles, function (file) {
+                    var fileInfo = map[path.basename(file)];
+                    self.emit('abort', fileInfo);
+                    fs.unlink(file);
+                });
+            })
+            .on('error', function (e) {
+                self.emit('error', e);
+            })
+            .on('progress', function (bytesReceived, bytesExpected) {
+                if (bytesReceived > options.maxPostSize)
+                    self.req.connection.destroy();
+            })
+            .on('end', finish)
+            .parse(self.req);
+    };
+
+    UploadHandler.prototype.destroy = function () {
+        var self = this,
+            fileName = path.basename(decodeURIComponent(this.req.url));
+
+        fs.unlink(options.uploadDir() + '/' + fileName, function (ex) {
+            _.each(options.imageVersions, function (value, version) {
+                fs.unlink(options.uploadDir() + '/' + version + '/' + fileName);
+            });
+            self.callback(!ex);
+        });
+    };
+
+    return UploadHandler;
+}
+
diff --git a/package.json b/package.json
index d0775ed..8ab826b 100644
--- a/package.json
+++ b/package.json
@@ -8,11 +8,12 @@
     "express",
     "middleware"
   ],
-  "version": "0.0.3",
+  "version": "0.0.4",
   "dependencies": {
     "formidable": ">=1.0.11",
     "imagemagick": ">=0.1.2",
-    "lodash": ">= 0.9.2"
+    "lodash": ">= 0.9.2",
+    "mkdirp": ">= 0.3.4"
   },
   "engines": {
     "node": ">= 0.8.8"
@@ -27,6 +28,6 @@
   "scripts": {
     "test": "echo \"Error: no test specified\" && exit 1"
   },
-  "_id": "jquery-file-upload-middleware@0.0.3",
+  "_id": "jquery-file-upload-middleware@0.0.4",
   "license": "MIT"
 }
